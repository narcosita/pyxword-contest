import hashlib
import random
import typing

from acrossword import crossword, gen, glossary

from pyxword_contest.crossword.models import Crossword


def clean(txt):
    """for cleaning crossword body&solution"""
    return txt.replace('\r', '').strip('\n').lower()


def compare(a: str, b: str) -> int:
    """
    Compare a to b, where both are supposed to be representation of a
    the same crossword.

    :param a: crossword A
    :param b: crossword B
    :return: number of differences
    """
    a, b = clean(a), clean(b)
    return abs(len(a) - len(b)) + sum(e1 != e2 for e1, e2 in zip(a, b))


def create_crossword(
    words: typing.Iterable[str],
    max_words: int = None,
    mask_ratio: float = 0.2,
) -> Crossword:
    """

    :param words: words to be used in crossword
    :param max_words: maximum number of words in crossword
    :param mask_ratio: ratio of masked character
    :return: Crossword instance with body and solution filled in
    """
    gl = glossary.Glossary(words)

    cw = gen.gen_limited_fails(
        gen.random_generator(gl),
        max_fails=5000,
        max_words=max_words,
    )
    cw.crop()

    solution = crossword.dumps(cw)
    exploded_body = list(solution)
    mask_counter = 0
    chars = 0
    for i in range(len(exploded_body)):
        if not exploded_body[i].isspace():
            chars += 1
            if random.random() < mask_ratio:
                exploded_body[i] = '*'
                mask_counter += 1

    body = ''.join(exploded_body)
    body_hash = hashlib.md5(
        body.encode('utf-8')
    ).hexdigest()[:8]

    return Crossword(
        name=f'Autogenerated#{body_hash}',
        solution=solution,
        body=body,
        score=int(
            len(cw.word_placements) *
            (mask_counter / chars / mask_ratio) /
            2
        ),
    )
